#1.安装sage
![image](https://raw.githubusercontent.com/35098a/learn/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(224).png)

#2.习题
##第一题
```python
#导入库
import gmpy2
import libnum

#已知p,q,e,c
p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
e = 65537
c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034

#计算模数n和欧拉函数phi
n = p * q
phi = (p - 1) * (q - 1)

#计算私钥d
d = int(gmpy2.invert(e, phi))

#解密
m = pow(c, d, n)

#转换
secret_message = libnum.n2s(m).decode("utf-8")

# 输出结果
print("信息:", secret_message)

##第二题
不会做qwq

##第三题
```python
#观察到公钥的加密指数e很小，又加密公式为c ≡ m^e mod n，也即c = m^e % n。所以由此可知，若是m^e=c，那么可直接解密出明文
#导入库
import libnum
import gmpy2

#已知c,n,e
c = 175676150266622974236396526711286850987631123485212632328509227849029911058091086706143340012942548868507757097027596460222082381606490997654543157611859508598203272345044220266344322516323997126214392011463091635444512796333373451321795475333496092463760390199602320265733668648810943598505902205569125
n = 1101676297168703265566511587913652821222614528632844563918598090813090976948138058144049294690727841463413972173051671908835164088465174349647584948964206244648736138253802417241570633968307801570794459668533128958442296813160786428069813867034205462528763830205245218089660432399549540588101288362866463
e = 3

#计算c的三次方根
m = int(gmpy2.iroot(c, 3)[0])

#验证条件是否满足
if pow(m, 3) == c:
    #将数值转换为字符串得到flag
    flag = libnum.n2s(m)
    print("", flag.decode())
else:
    print("解密失败")
